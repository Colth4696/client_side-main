{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colthafer/client_side-main/src/Fulfilled.js\";\nimport axios from \"axios\";\nimport React, { Component } from \"react\"; // const FulfilledButton = () => {\n// const [isfulfilled, setIsFulfilled] = React.useState(false);\n// const republish = () => {\n// setIsFulfilled(value => !value);\n// return (\n// <input\n// type=\"checkbox\"\n// checked={isfulfilled}\n// onChange={republish}\n// />\n// );\n// }\n// export default FulfilledButton;\n\nclass FulfilledButton extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = event => {\n      const {\n        fulfilled\n      } = true;\n      const {\n        request,\n        volunteer\n      } = this.props;\n      console.log(request);\n      axios.patch(`http://localhost:3003/requests/${request.id} ${volunteer.id}`, {\n        fulfilled\n      }, {\n        withCredentials: true\n      }).then(response => {\n        if (response.data.status === 200) {\n          this.redirect();\n        }\n      }).catch(error => {\n        console.log(\"request error\", error);\n      });\n    };\n\n    this.redirect = () => {\n      window.location.reload();\n    };\n\n    this.state = {\n      fulfilled: false\n    }; // this.toggleFulfilled=this.toggleFulfilled.bind(this)\n  } // toggleFulfilled = () => {\n  // const { fulfilled } = this.state;\n  // this.setState({fulfilled: !fulfilled});\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleSubmit,\n      fulfilled: this.state.fulfilled,\n      children: \"Fulfill Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default FulfilledButton;","map":{"version":3,"sources":["/Users/colthafer/client_side-main/src/Fulfilled.js"],"names":["axios","React","Component","FulfilledButton","constructor","handleSubmit","event","fulfilled","request","volunteer","props","console","log","patch","id","withCredentials","then","response","data","status","redirect","catch","error","window","location","reload","state","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,eAAN,SAA8BD,SAA9B,CAAwC;AACxCE,EAAAA,WAAW,GAAE;AACb;;AADa,SAcbC,YAda,GAcGC,KAAD,IAAW;AAC1B,YAAM;AAACC,QAAAA;AAAD,UAAc,IAApB;AACA,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAyB,KAAKC,KAApC;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAR,MAAAA,KAAK,CAACa,KAAN,CAAa,kCAAiCL,OAAO,CAACM,EAAG,IAAGL,SAAS,CAACK,EAAG,EAAzE,EAA4E;AAACP,QAAAA;AAAD,OAA5E,EAAyF;AAACQ,QAAAA,eAAe,EAAE;AAAlB,OAAzF,EACCC,IADD,CACMC,QAAQ,IAAI;AAClB,YAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,GAA7B,EAAkC;AAClC,eAAKC,QAAL;AACC;AACA,OALD,EAMCC,KAND,CAMOC,KAAK,IAAI;AAChBX,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BU,KAA7B;AACC,OARD;AASC,KA7BY;;AAAA,SA8BbF,QA9Ba,GA8BF,MAAM;AACbG,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,KAhCY;;AAEb,SAAKC,KAAL,GAAa;AACbnB,MAAAA,SAAS,EAAE;AADE,KAAb,CAFa,CAMb;AACC,GARuC,CAUxC;AACA;AACA;AACA;;;AAuBAoB,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAQ,MAAA,OAAO,EAAE,KAAKtB,YAAtB;AAAoC,MAAA,SAAS,EAAE,KAAKqB,KAAL,CAAWnB,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAzCuC;;AA6CxC,eAAeJ,eAAf","sourcesContent":["import axios from \"axios\";\nimport React, { Component }from \"react\";\n\n// const FulfilledButton = () => {\n// const [isfulfilled, setIsFulfilled] = React.useState(false);\n// const republish = () => {\n// setIsFulfilled(value => !value);\n\n// return (\n// <input\n// type=\"checkbox\"\n// checked={isfulfilled}\n// onChange={republish}\n// />\n// );\n// }\n\n// export default FulfilledButton;\n\nclass FulfilledButton extends Component {\nconstructor(){\nsuper()\nthis.state = {\nfulfilled: false,\n};\n\n// this.toggleFulfilled=this.toggleFulfilled.bind(this)\n}\n\n// toggleFulfilled = () => {\n// const { fulfilled } = this.state;\n// this.setState({fulfilled: !fulfilled});\n// }\n\nhandleSubmit = (event) => {\nconst {fulfilled} = true;\nconst { request, volunteer } = this.props;\n\n\nconsole.log(request);\naxios.patch(`http://localhost:3003/requests/${request.id} ${volunteer.id}`, {fulfilled}, {withCredentials: true})\n.then(response => {\nif (response.data.status === 200) {\nthis.redirect();\n}\n})\n.catch(error => {\nconsole.log(\"request error\", error);\n});\n};\nredirect = () => {\n    window.location.reload();\n}\n\n\nrender() {\n\n    return(\n        <button onClick={this.handleSubmit} fulfilled={this.state.fulfilled}>Fulfill Request</button>  \n    )\n}\n}\n\n\nexport default FulfilledButton;\n"]},"metadata":{},"sourceType":"module"}