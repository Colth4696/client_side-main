{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colthafer/client_side-main/src/ChatroomsList.js\";\nimport React from 'react';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\nimport { API_ROOT } from './constants/index';\nimport MessagesArea from './MessagesArea';\nimport axios from 'axios';\n\nclass ChatroomList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatrooms: [],\n      activeChatroom: this.props.chatroom\n    };\n\n    this.componentDidMount = () => {\n      const {\n        activeChatroom\n      } = this.state;\n      axios.get(`${API_ROOT}/chatrooms`).then(res => {\n        const chatroomList = res.data;\n        const currentRoom = chatroomList.find(room => {\n          return room.name === activeChatroom.name && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id;\n        });\n        this.setState({\n          activeChatroom: currentRoom\n        });\n      });\n    };\n\n    this.handleClick = name => {\n      this.setState({\n        activeChatroom: name\n      });\n    };\n\n    this.handleReceivedChatroom = response => {\n      console.log('handleReceivedChatroom', response);\n      const {\n        chatroom\n      } = response;\n      this.setState({\n        chatrooms: [...this.state.chatrooms, chatroom]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      console.log('response message', response);\n      const {\n        message\n      } = response;\n      const {\n        activeChatroom\n      } = this.state;\n      activeChatroom.messages = [...activeChatroom.messages, message];\n      this.setState({\n        activeChatroom\n      });\n    };\n\n    this.render = () => {\n      const {\n        chatrooms,\n        activeChatroom\n      } = this.state;\n      console.log('activeChatroom', activeChatroom);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroomsList\",\n        children: [activeChatroom ? /*#__PURE__*/_jsxDEV(ActionCableConsumer, {\n          channel: {\n            channel: 'MessagesChannel',\n            chatroom: activeChatroom.id\n          },\n          onReceived: res => {\n            console.log(res);\n            this.handleReceivedMessage(res);\n          }\n        }, activeChatroom.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this) : null, activeChatroom ? /*#__PURE__*/_jsxDEV(MessagesArea, {\n          chatroom: activeChatroom,\n          user_id: this.props.user_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default ChatroomList;\n\nconst mapChatrooms = (chatrooms, handleClick) => {\n  return chatrooms.map(chatroom => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => handleClick(chatroom.name),\n      children: chatroom.name\n    }, chatroom.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  });\n};","map":{"version":3,"sources":["/Users/colthafer/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCableConsumer","API_ROOT","MessagesArea","axios","ChatroomList","Component","state","chatrooms","activeChatroom","props","chatroom","componentDidMount","get","then","res","chatroomList","data","currentRoom","find","room","name","request_id","volunteer_id","setState","handleClick","handleReceivedChatroom","response","console","log","handleReceivedMessage","message","messages","render","channel","id","user_id","mapChatrooms","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ActionCableConsumer } from 'react-actioncable-provider';\r\nimport { API_ROOT } from './constants/index';\r\nimport MessagesArea from './MessagesArea';\r\nimport axios from 'axios';\r\n\r\nclass ChatroomList extends React.Component {\r\n  state = {\r\n    chatrooms: [],\r\n    activeChatroom: this.props.chatroom\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const { activeChatroom } = this.state;\r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => {\r\n        const chatroomList = res.data;\r\n        const currentRoom = chatroomList.find(room => {\r\n          return room.name === activeChatroom.name && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id\r\n        })\r\n        this.setState({ activeChatroom: currentRoom })\r\n      })\r\n  };\r\n\r\n  handleClick = name => {\r\n    this.setState({ activeChatroom: name });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    console.log('handleReceivedChatroom', response);\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    console.log('response message', response);\r\n    const { message } = response;\r\n    const { activeChatroom } = this.state;\r\n    activeChatroom.messages = [...activeChatroom.messages, message];\r\n    this.setState({ activeChatroom });\r\n  };\r\n\r\n  render = () => {\r\n    const { chatrooms, activeChatroom } = this.state;\r\n    console.log('activeChatroom', activeChatroom);\r\n    return (\r\n      <div className=\"chatroomsList\">\r\n        {activeChatroom ? (\r\n          <ActionCableConsumer\r\n            key={activeChatroom.id}\r\n            channel={{ channel: 'MessagesChannel', chatroom: activeChatroom.id }}\r\n            onReceived={(res) => { console.log(res); this.handleReceivedMessage(res) }}\r\n          />\r\n        ) : null}\r\n        {activeChatroom ? (\r\n          <MessagesArea\r\n            chatroom={activeChatroom}\r\n            user_id={this.props.user_id}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomList;\r\n\r\nconst mapChatrooms = (chatrooms, handleClick) => {\r\n  return chatrooms.map(chatroom => {\r\n    return (\r\n      <li key={chatroom.name} onClick={() => handleClick(chatroom.name)}>\r\n        {chatroom.name}\r\n      </li>\r\n    );\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}