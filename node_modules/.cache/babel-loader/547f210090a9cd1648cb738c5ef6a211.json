{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colthafer/client_side-main/src/ChatroomsList.js\";\nimport React from 'react';\nimport { ActionCable, ActionCableConsumer } from 'react-actioncable-provider';\nimport { API_ROOT, API_WS_ROOT } from './constants/index';\nimport MessagesArea from './MessagesArea';\nimport axios from 'axios';\nconst actionCable = {};\nactionCable.cable = ActionCable.createConsumer(API_WS_ROOT);\n\nclass ChatroomList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatrooms: [],\n      activeChatroom: this.props.chatroom\n    };\n\n    this.componentWillMount = () => {\n      const {\n        chatroom\n      } = this.props;\n      if (!chatroom.messages) chatroom.messages = [];\n      if (!chatroom.id) chatroom.id = 1;\n      this.setState({\n        activeChatroom: chatroom\n      });\n      console.log('mounted', this.props);\n      axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`).then(res => {\n        console.log('res', res);\n        this.setState({\n          activeChatroom: res.data\n        });\n      }).then(chatrooms => {\n        console.log(chatrooms);\n        this.setState({\n          chatrooms\n        });\n      });\n    };\n\n    this.componentDidMount = () => {\n      const {\n        activeChatroom\n      } = this.state;\n      axios.get(`${API_ROOT}/chatrooms`).then(res => {\n        console.log(res);\n        const chatroomList = res.data;\n        console.log(chatroomList, this.props);\n        const currentRoom = chatroomList.find(room => {\n          return room.name === activeChatroom.id; // && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id\n        });\n        this.setState({\n          activeChatroom: currentRoom\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.handleClick = name => {\n      this.setState({\n        activeChatroom: name\n      });\n    };\n\n    this.handleReceivedChatroom = response => {\n      console.log('handleReceivedChatroom', response);\n      const {\n        chatroom\n      } = response;\n      this.setState({\n        chatrooms: [...this.state.chatrooms, chatroom]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      console.log('response message', response);\n      const {\n        message\n      } = response;\n      const {\n        activeChatroom\n      } = this.state;\n      activeChatroom.messages = [...activeChatroom.messages, message];\n      this.setState({\n        activeChatroom\n      });\n    };\n\n    this.render = () => {\n      const {\n        activeChatroom\n      } = this.state; // console.log('actionCable', actionCable);\n\n      console.log('activeChatroom', activeChatroom);\n      actionCable.cable.subscriptions.create({\n        channel: 'ChatroomsChannel'\n      }, {\n        received: data => {\n          console.log(data);\n          this.handleReceivedChatroom(data);\n        }\n      });\n      actionCable.cable.subscriptions.create({\n        channel: 'MessagesChannel',\n        chatroom: activeChatroom.id\n      }, {\n        received: data => {\n          console.log(data);\n          this.handleReceivedMessage(data);\n        }\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroomsList\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this), activeChatroom ? /*#__PURE__*/_jsxDEV(ActionCableConsumer, {\n          // cable={actionCable.cable}\n          channel: {\n            channel: 'MessagesChannel',\n            chatroom: activeChatroom.id\n          },\n          onReceived: res => {\n            console.log(res);\n            this.handleReceivedMessage(res);\n          } // onInitialized= {(res) => console.log(res)}\n          // onConnected= {(res) => console.log(res)}\n          // onDisconnected= {(res) => console.log('disconnecting...',res)}\n          // onRejected= {(res) => console.log(res)}\n\n        }, activeChatroom.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 12\n        }, this) : null, activeChatroom ? /*#__PURE__*/_jsxDEV(MessagesArea, {\n          chatroom: activeChatroom,\n          user_id: this.props.user_id // findActiveChatroom(\n          //   chatrooms,\n          //   activeChatroom\n          // )\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default ChatroomList; // helpers\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\n//   return chatrooms.find(\n//     chatroom => {\n//       console.log(chatroom);\n//       console.log(activeChatroom);\n//       return chatroom.name === activeChatroom\n//     }\n//   );\n// };\n// const mapChatrooms = (chatrooms, handleClick) => {\n//  return chatrooms.map(chatroom => {\n//    return (\n//      <li key={chatroom.name} onClick={() => handleClick(chatroom.name)}>\n//        {chatroom.name}\n//      </li>\n//    );\n//  });\n// };\n// import React from 'react';\n// import { ActionCable } from 'react-actioncable-provider';\n// import { API_ROOT } from './constants/index';\n// import NewChatroomForm from './NewChatroomForm';\n// import MessagesArea from './MessagesArea';\n// import Cable from './Cable';\n// import axios from 'axios';\n// class ChatroomsList extends React.Component {\n//   state = {\n//     // chatrooms: [],\n//     activeChatroom: {}//this.props.chatroom\n//   };\n//   componentWillMount = () => {\n//     const { chatroom } = this.props;\n//     if (!chatroom.messages) chatroom.messages = [];\n//     if (!chatroom.id) chatroom.id = 1;\n//     // this.setState({activeChatroom: chatroom});\n//   //   console.log('mounted', this.props);\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\n//       .then(res => {\n//         console.log('res', res); \n//         this.setState({activeChatroom: res.data})\n//         // res\n//       })\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\n//   };\n//   // handleClick = id => {\n//   //   this.setState({ activeChatroom: id });\n//   // };\n//   // handleReceivedChatroom = response => {\n//   //   const { chatroom } = response;\n//   //   this.setState({\n//   //     chatrooms: [...this.state.chatrooms, chatroom]\n//   //   });\n//   // };\n//   handleReceivedMessage = response => {\n//     const { message } = response;\n//     const {activeChatroom} = this.state;\n//     // const chatrooms = [...this.state.chatrooms];\n//     // const chatroom = chatrooms.find(\n//     //   chatroom => chatroom.id === message.chatroom_id\n//     // );\n//     if (!activeChatroom.messages) activeChatroom.messages = [];\n//     // activeChatroom.messages.concat(message)\n//     activeChatroom.messages = [...activeChatroom.messages, message];\n//     this.setState({ activeChatroom });\n//   };\n//   render = () => {\n//     const { activeChatroom } = this.state;\n//     console.log(activeChatroom);\n//     return (\n//       <div className=\"ChatroomsList\">\n//         <h1>{activeChatroom.name}</h1>\n//         {activeChatroom ?\n//         <div>\n//           <ActionCable\n//             channel={{ channel: 'chatroom_channel' }}\n//           />\n//             <Cable\n//               chatroom={activeChatroom}\n//               handleReceivedMessage={this.handleReceivedMessage}\n//             />\n//           <h2>Chatrooms</h2>\n//           <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\n//           <NewChatroomForm />\n//           {activeChatroom ? (\n//             <MessagesArea\n//               chatroom={activeChatroom}\n//               user_id={this.props.user_id}\n//             />\n//           ) : null}\n//           </div>\n//           : 'No Chats were found'}\n//       </div>\n//     );\n//   };\n// }\n// export default ChatroomsList;\n// // helpers\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\n//   console.log('chatrooms', chatrooms)\n//   return chatrooms.find(\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\n//   );\n// };\n// const mapchatrooms = (chatrooms, handleClick) => {\n//   return chatrooms.map(chatroom => {\n//     return (\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\n//         {chatroom.name}\n//       </li>\n//     );\n//   });\n// };","map":{"version":3,"sources":["/Users/colthafer/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCable","ActionCableConsumer","API_ROOT","API_WS_ROOT","MessagesArea","axios","actionCable","cable","createConsumer","ChatroomList","Component","state","chatrooms","activeChatroom","props","chatroom","componentWillMount","messages","id","setState","console","log","get","then","res","data","componentDidMount","chatroomList","currentRoom","find","room","name","catch","error","handleClick","handleReceivedChatroom","response","handleReceivedMessage","message","render","subscriptions","create","channel","received","user_id"],"mappings":"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":["import React from 'react';\r\nimport { ActionCable, ActionCableConsumer } from 'react-actioncable-provider';\r\nimport { API_ROOT, API_WS_ROOT } from './constants/index';\r\nimport MessagesArea from './MessagesArea';\r\nimport axios from 'axios';\r\n\r\n const actionCable = {};\r\n actionCable.cable = ActionCable.createConsumer(API_WS_ROOT);\r\n\r\nclass ChatroomList extends React.Component {\r\n  state = {\r\n    chatrooms: [],\r\n    activeChatroom: this.props.chatroom\r\n  };\r\n\r\n     componentWillMount = () => {\r\n    const { chatroom } = this.props;\r\n    if (!chatroom.messages) chatroom.messages = [];\r\n     if (!chatroom.id) chatroom.id = 1;\r\n      this.setState({activeChatroom: chatroom});\r\n      console.log('mounted', this.props);\r\n     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n       .then(res => {\r\n         console.log('res', res); \r\n         this.setState({activeChatroom: res.data})\r\n       })\r\n        .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n   };\r\n\r\n  componentDidMount = () => {\r\n    const { activeChatroom } = this.state;\r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => {\r\n        console.log(res)\r\n        const chatroomList = res.data;\r\n        console.log(chatroomList, this.props)\r\n        const currentRoom = chatroomList.find(room => {\r\n          return room.name === activeChatroom.id // && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id\r\n        })\r\n        this.setState({ activeChatroom: currentRoom })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  };\r\n\r\n  handleClick = name => {\r\n    this.setState({ activeChatroom: name });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    console.log('handleReceivedChatroom', response);\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    console.log('response message', response);\r\n    const { message } = response;\r\n    const { activeChatroom } = this.state;\r\n    activeChatroom.messages = [...activeChatroom.messages, message];\r\n    this.setState({ activeChatroom });\r\n  };\r\n\r\n  render = () => {\r\n    const { activeChatroom } = this.state;\r\n    // console.log('actionCable', actionCable);\r\n    console.log('activeChatroom', activeChatroom);\r\n     actionCable.cable.subscriptions.create({channel: 'ChatroomsChannel'}, \r\n       {\r\n         received: (data) => {\r\n           console.log(data);\r\n          this.handleReceivedChatroom(data)\r\n         }\r\n       }\r\n     );\r\n     actionCable.cable.subscriptions.create({channel: 'MessagesChannel', chatroom: activeChatroom.id}, \r\n      {\r\n         received: (data) => {\r\n           console.log(data);\r\n           this.handleReceivedMessage(data)\r\n         }\r\n       }\r\n     )\r\n    return (\r\n      <div className=\"chatroomsList\">\r\n        <div>\r\n          {/* {} */}\r\n            {/* <Cable\r\n              chatroom={this.props.chatroom}\r\n              handleReceivedMessage={this.handleReceivedMessage}\r\n            /> */}\r\n        </div>\r\n        {/* <ActionCableConsumer\r\n          cable={actionCable.cable}\r\n          channel='chatrooms_channel'\r\n          onReceived={this.handleReceivedChatroom}\r\n        >\r\n          <Cable\r\n            chatroom={this.props.chatroom}\r\n            handleReceivedMessage={this.handleReceivedMessage}\r\n          />\r\n        </ActionCableConsumer> */}\r\n        {/* ) : null} */}\r\n        {/* <h2>Chatrooms</h2> */}\r\n        {/* <ul>{mapChatrooms(chatrooms, this.handleClick)}</ul> */}\r\n        {/* <NewChatroomForm /> */}\r\n        {activeChatroom ? (\r\n           <ActionCableConsumer\r\n            key={activeChatroom.id}\r\n            // cable={actionCable.cable}\r\n            channel={{ channel: 'MessagesChannel', chatroom: activeChatroom.id }}\r\n            onReceived={(res) => {console.log(res); this.handleReceivedMessage(res)}}\r\n            // onInitialized= {(res) => console.log(res)}\r\n            // onConnected= {(res) => console.log(res)}\r\n            // onDisconnected= {(res) => console.log('disconnecting...',res)}\r\n            // onRejected= {(res) => console.log(res)}\r\n          />\r\n        ) : null}\r\n        {activeChatroom ? (\r\n          <MessagesArea\r\n            chatroom={activeChatroom}\r\n            user_id={this.props.user_id}\r\n            // findActiveChatroom(\r\n            //   chatrooms,\r\n            //   activeChatroom\r\n            // )\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomList;\r\n\r\n// helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   return chatrooms.find(\r\n//     chatroom => {\r\n//       console.log(chatroom);\r\n//       console.log(activeChatroom);\r\n//       return chatroom.name === activeChatroom\r\n//     }\r\n//   );\r\n// };\r\n\r\n// const mapChatrooms = (chatrooms, handleClick) => {\r\n//  return chatrooms.map(chatroom => {\r\n//    return (\r\n//      <li key={chatroom.name} onClick={() => handleClick(chatroom.name)}>\r\n//        {chatroom.name}\r\n//      </li>\r\n//    );\r\n//  });\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { ActionCable } from 'react-actioncable-provider';\r\n// import { API_ROOT } from './constants/index';\r\n// import NewChatroomForm from './NewChatroomForm';\r\n// import MessagesArea from './MessagesArea';\r\n// import Cable from './Cable';\r\n// import axios from 'axios';\r\n\r\n// class ChatroomsList extends React.Component {\r\n//   state = {\r\n//     // chatrooms: [],\r\n//     activeChatroom: {}//this.props.chatroom\r\n//   };\r\n\r\n//   componentWillMount = () => {\r\n//     const { chatroom } = this.props;\r\n//     if (!chatroom.messages) chatroom.messages = [];\r\n//     if (!chatroom.id) chatroom.id = 1;\r\n//     // this.setState({activeChatroom: chatroom});\r\n//   //   console.log('mounted', this.props);\r\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n//       .then(res => {\r\n//         console.log('res', res); \r\n//         this.setState({activeChatroom: res.data})\r\n//         // res\r\n//       })\r\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n//   };\r\n\r\n//   // handleClick = id => {\r\n//   //   this.setState({ activeChatroom: id });\r\n//   // };\r\n\r\n//   // handleReceivedChatroom = response => {\r\n//   //   const { chatroom } = response;\r\n//   //   this.setState({\r\n//   //     chatrooms: [...this.state.chatrooms, chatroom]\r\n//   //   });\r\n//   // };\r\n\r\n//   handleReceivedMessage = response => {\r\n//     const { message } = response;\r\n//     const {activeChatroom} = this.state;\r\n//     // const chatrooms = [...this.state.chatrooms];\r\n//     // const chatroom = chatrooms.find(\r\n//     //   chatroom => chatroom.id === message.chatroom_id\r\n//     // );\r\n//     if (!activeChatroom.messages) activeChatroom.messages = [];\r\n//     // activeChatroom.messages.concat(message)\r\n//     activeChatroom.messages = [...activeChatroom.messages, message];\r\n//     this.setState({ activeChatroom });\r\n//   };\r\n\r\n//   render = () => {\r\n//     const { activeChatroom } = this.state;\r\n//     console.log(activeChatroom);\r\n//     return (\r\n//       <div className=\"ChatroomsList\">\r\n//         <h1>{activeChatroom.name}</h1>\r\n//         {activeChatroom ?\r\n//         <div>\r\n//           <ActionCable\r\n//             channel={{ channel: 'chatroom_channel' }}\r\n//           />\r\n//             <Cable\r\n//               chatroom={activeChatroom}\r\n//               handleReceivedMessage={this.handleReceivedMessage}\r\n//             />\r\n//           <h2>Chatrooms</h2>\r\n//           <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\r\n//           <NewChatroomForm />\r\n//           {activeChatroom ? (\r\n//             <MessagesArea\r\n//               chatroom={activeChatroom}\r\n//               user_id={this.props.user_id}\r\n//             />\r\n//           ) : null}\r\n//           </div>\r\n//           : 'No Chats were found'}\r\n//       </div>\r\n//     );\r\n//   };\r\n// }\r\n\r\n// export default ChatroomsList;\r\n\r\n// // helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   console.log('chatrooms', chatrooms)\r\n//   return chatrooms.find(\r\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\r\n//   );\r\n// };\r\n\r\n// const mapchatrooms = (chatrooms, handleClick) => {\r\n//   return chatrooms.map(chatroom => {\r\n//     return (\r\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n//         {chatroom.name}\r\n//       </li>\r\n//     );\r\n//   });\r\n// };"]},"metadata":{},"sourceType":"module"}