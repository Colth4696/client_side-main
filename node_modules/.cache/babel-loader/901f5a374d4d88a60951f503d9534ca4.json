{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colthafer/client_side-main/src/Fulfilled.js\";\nimport axios from \"axios\";\nimport React, { Component } from \"react\"; // const FulfilledButton = () => {\n//     const [isfulfilled, setIsFulfilled] = React.useState(false);\n//     const republish = () => {\n//         setIsFulfilled(value => !value);\n// return (\n//     <input\n//         type=\"checkbox\"\n//         checked={isfulfilled}\n//         onChange={republish}\n//     />\n// );\n// }\n// export default FulfilledButton;\n\nclass FulfilledButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const status = {\n        volunteer_id: this.props.volunteer_id,\n        request_id: this.props.request_id,\n        fulfilled: true\n      };\n      axios.post(\"http://localhost:3003/statuses\", {\n        status\n      }, {\n        withCredentials: true\n      }).then(response => {\n        if (response.data.status === 'created') {\n          this.props.request_status(response.data);\n          this.redirect('/');\n        }\n      }).catch(error => {\n        console.log(\"request error\", error);\n      });\n      event.preventDefault();\n    };\n\n    this.state = {\n      status: [],\n      fulfilled: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleSubmit,\n      children: [\"Fulfill Request: \", this.state.request_status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default FulfilledButton;","map":{"version":3,"sources":["/Users/colthafer/client_side-main/src/Fulfilled.js"],"names":["axios","React","Component","FulfilledButton","constructor","props","handleSubmit","event","preventDefault","status","volunteer_id","request_id","fulfilled","post","withCredentials","then","response","data","request_status","redirect","catch","error","console","log","state","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,eAAN,SAA8BD,SAA9B,CAAwC;AACpCE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAQlBC,YARkB,GAQFC,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMC,MAAM,GAAG;AACbC,QAAAA,YAAY,EAAE,KAAKL,KAAL,CAAWK,YADZ;AAEbC,QAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWM,UAFV;AAGbC,QAAAA,SAAS,EAAE;AAHE,OAAf;AAKIZ,MAAAA,KAAK,CAACa,IAAN,CAAW,gCAAX,EAA6C;AAACJ,QAAAA;AAAD,OAA7C,EAAuD;AAACK,QAAAA,eAAe,EAAE;AAAlB,OAAvD,EACCC,IADD,CACMC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACC,IAAT,CAAcR,MAAd,KAAyB,SAA7B,EAAwC;AACxC,eAAKJ,KAAL,CAAWa,cAAX,CAA0BF,QAAQ,CAACC,IAAnC;AACA,eAAKE,QAAL,CAAc,GAAd;AACH;AACJ,OANG,EAOCC,KAPD,CAOOC,KAAK,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,KAA7B;AACH,OATD;AAUAd,MAAAA,KAAK,CAACC,cAAN;AACH,KA1BiB;;AAEb,SAAKgB,KAAL,GAAa;AACZf,MAAAA,MAAM,EAAE,EADI;AAEZG,MAAAA,SAAS,EAAE;AAFC,KAAb;AAIJ;;AAuBDa,EAAAA,MAAM,GAAE;AACJ,wBAAO;AAAQ,MAAA,OAAO,EAAE,KAAKnB,YAAtB;AAAA,sCAAsD,KAAKkB,KAAL,CAAWN,cAAjE;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAhCmC;;AAmCxC,eAAef,eAAf","sourcesContent":["import axios from \"axios\";\nimport React, { Component }from \"react\";\n\n// const FulfilledButton = () => {\n//     const [isfulfilled, setIsFulfilled] = React.useState(false);\n//     const republish = () => {\n//         setIsFulfilled(value => !value);\n\n// return (\n//     <input\n//         type=\"checkbox\"\n//         checked={isfulfilled}\n//         onChange={republish}\n//     />\n// );\n// }\n\n// export default FulfilledButton;\n\nclass FulfilledButton extends Component {\n    constructor(props){\n        super(props)\n         this.state = {\n          status: [],\n          fulfilled: false \n    };\n    }\n\n    handleSubmit = (event) => {\n    event.preventDefault()\n    const status = {\n      volunteer_id: this.props.volunteer_id,\n      request_id: this.props.request_id,\n      fulfilled: true\n    }\n        axios.post(\"http://localhost:3003/statuses\", {status}, {withCredentials: true})\n        .then(response => {\n            if (response.data.status === 'created') {\n            this.props.request_status(response.data)\n            this.redirect('/')            \n        }\n    })        \n        .catch(error => {\n            console.log(\"request error\", error);\n        });\n        event.preventDefault();\n    };\n    \n    \n    render(){\n        return <button onClick={this.handleSubmit}>Fulfill Request: {this.state.request_status}</button>\n    }\n}\n\nexport default FulfilledButton;\n"]},"metadata":{},"sourceType":"module"}