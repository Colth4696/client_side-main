{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colthafer/client_side-main/src/MapContainer.js\";\nimport React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap } from \"react-google-maps\";\nimport \"./MapApi.css\";\nimport RequestMarkers from \"./RequestMarkers\";\n\nconst getPosition = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition, posError); // Passing in a success callback and an error callback fn\n  } else {\n    alert(\"Sorry, Geolocation is not supported by this browser.\"); // Alert is browser does not support geolocation\n  }\n};\n\nconst posError = () => {\n  if (navigator.permissions) {\n    navigator.permissions.query({\n      name: 'geolocation'\n    }).then(res => {\n      if (res.state === 'denied') {\n        alert('Enable location permissions for this website in your browser settings.');\n      }\n    });\n  } else {\n    alert('Unable to access your location. You can continue by submitting location manually.'); // Obtaining Lat/long from address necessary\n  }\n}; // Geolocation success callback fn\n\n\nconst showPosition = position => {\n  let lat = position.coords.latitude; // You have obtained latitude coordinate!\n\n  let long = position.coords.longitude; // You have obtained longitude coordinate!\n\n  props.set_lat(lat); // Using dispatch to modify lat store state\n\n  props.set_long(long); // Using dispatch to modify long store state\n\n  convertToAddress(lat, long); // Will convert lat/long to City, State, & Zip code\n};\n\nconst MyMapComponent = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyB465RpcGT8xIHfVYXmsDZP657fvRgqQr0\",\n  loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 25\n  }, this),\n  containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `450px`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 27\n  }, this),\n  mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`,\n      width: '70%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this)\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n  defaultZoom: 18,\n  defaultCenter: {\n    getPosition\n  },\n  children: /*#__PURE__*/_jsxDEV(RequestMarkers, {\n    request: props.request,\n    user: props.user\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 5\n}, this));\nexport default MyMapComponent;","map":{"version":3,"sources":["/Users/colthafer/client_side-main/src/MapContainer.js"],"names":["React","compose","withProps","withScriptjs","withGoogleMap","GoogleMap","RequestMarkers","getPosition","navigator","geolocation","getCurrentPosition","showPosition","posError","alert","permissions","query","name","then","res","state","position","lat","coords","latitude","long","longitude","props","set_lat","set_long","convertToAddress","MyMapComponent","googleMapURL","loadingElement","height","containerElement","mapElement","width","request","user"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,WAAnC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,SAAtC,QAAuD,mBAAvD;AACA,OAAO,cAAP;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,MAAIC,SAAS,CAACC,WAAd,EAA2B;AAC3BD,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,YAAzC,EAAuDC,QAAvD,EAD2B,CACuC;AACjE,GAFD,MAEO;AACPC,IAAAA,KAAK,CAAC,sDAAD,CAAL,CADO,CACwD;AAC9D;AACA,CANL;;AAQI,MAAMD,QAAQ,GAAG,MAAM;AACnB,MAAIJ,SAAS,CAACM,WAAd,EAA2B;AAC3BN,IAAAA,SAAS,CAACM,WAAV,CAAsBC,KAAtB,CAA4B;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA5B,EAAqDC,IAArD,CAA0DC,GAAG,IAAI;AACjE,UAAIA,GAAG,CAACC,KAAJ,KAAc,QAAlB,EAA4B;AAC5BN,QAAAA,KAAK,CAAC,wEAAD,CAAL;AACC;AACA,KAJD;AAKC,GAND,MAMO;AACPA,IAAAA,KAAK,CAAC,mFAAD,CAAL,CADO,CACoF;AAC1F;AACA,CAVL,C,CAWI;;;AACA,MAAMF,YAAY,GAAIS,QAAD,IAAc;AACnC,MAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B,CADmC,CACA;;AACnC,MAAIC,IAAI,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA3B,CAFmC,CAEE;;AACrCC,EAAAA,KAAK,CAACC,OAAN,CAAcN,GAAd,EAHmC,CAGhB;;AACnBK,EAAAA,KAAK,CAACE,QAAN,CAAeJ,IAAf,EAJmC,CAId;;AACrBK,EAAAA,gBAAgB,CAACR,GAAD,EAAMG,IAAN,CAAhB,CALmC,CAKP;AAC3B,CAND;;AASR,MAAMM,cAAc,GAAG7B,OAAO,CAC1BC,SAAS,CAAC;AACN6B,EAAAA,YAAY,EAAE,qFADR;AAENC,EAAAA,cAAc,eAAE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA,UAFV;AAGNC,EAAAA,gBAAgB,eAAE;AAAK,IAAA,KAAK,EAAE;AAAED,MAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA,UAHZ;AAINE,EAAAA,UAAU,eAAE;AAAK,IAAA,KAAK,EAAE;AAAEF,MAAAA,MAAM,EAAG,MAAX;AAAkBG,MAAAA,KAAK,EAAE;AAAzB;AAAZ;AAAA;AAAA;AAAA;AAAA;AAJN,CAAD,CADiB,EAO1BjC,YAP0B,EAQ1BC,aAR0B,CAAP,CASpBsB,KAAD,iBAEE,QAAC,SAAD;AACI,EAAA,WAAW,EAAE,EADjB;AAEI,EAAA,aAAa,EAAE;AAAEnB,IAAAA;AAAF,GAFnB;AAAA,yBAGI,QAAC,cAAD;AAAgB,IAAA,OAAO,EAAEmB,KAAK,CAACW,OAA/B;AAAwC,IAAA,IAAI,EAAEX,KAAK,CAACY;AAApD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,QAXmB,CAAvB;AAoBA,eAAeR,cAAf","sourcesContent":["import React from \"react\"\r\nimport { compose, withProps } from \"recompose\"\r\nimport { withScriptjs, withGoogleMap, GoogleMap } from \"react-google-maps\"\r\nimport \"./MapApi.css\";\r\nimport RequestMarkers from \"./RequestMarkers\";\r\n\r\nconst getPosition = () => {\r\n    if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(showPosition, posError); // Passing in a success callback and an error callback fn\r\n    } else {\r\n    alert(\"Sorry, Geolocation is not supported by this browser.\"); // Alert is browser does not support geolocation\r\n    }\r\n    }\r\n\r\n    const posError = () => {\r\n        if (navigator.permissions) {\r\n        navigator.permissions.query({ name: 'geolocation' }).then(res => {\r\n        if (res.state === 'denied') {\r\n        alert('Enable location permissions for this website in your browser settings.')\r\n        }\r\n        })\r\n        } else {\r\n        alert('Unable to access your location. You can continue by submitting location manually.') // Obtaining Lat/long from address necessary\r\n        }\r\n        }\r\n        // Geolocation success callback fn\r\n        const showPosition = (position) => {\r\n        let lat = position.coords.latitude // You have obtained latitude coordinate!\r\n        let long = position.coords.longitude // You have obtained longitude coordinate!\r\n        props.set_lat(lat) // Using dispatch to modify lat store state\r\n        props.set_long(long) // Using dispatch to modify long store state\r\n        convertToAddress(lat, long) // Will convert lat/long to City, State, & Zip code\r\n        }\r\n\r\n\r\nconst MyMapComponent = compose(\r\n    withProps({\r\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyB465RpcGT8xIHfVYXmsDZP657fvRgqQr0\",\r\n        loadingElement: <div style={{ height: `100%` }} />,\r\n        containerElement: <div style={{ height: `450px` }} />,\r\n        mapElement: <div style={{ height: `100%`, width: '70%' }} />,\r\n    }),\r\n    withScriptjs,\r\n    withGoogleMap\r\n)((props) =>\r\n\r\n    <GoogleMap\r\n        defaultZoom={18}\r\n        defaultCenter={{ getPosition }}>\r\n        <RequestMarkers request={props.request} user={props.user} />\r\n    </GoogleMap>\r\n\r\n)\r\n\r\n\r\nexport default MyMapComponent"]},"metadata":{},"sourceType":"module"}