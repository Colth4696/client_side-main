{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colthafer/client_side-main/src/Fulfilled.js\";\nimport axios from \"axios\";\nimport React, { Component } from \"react\"; // const FulfilledButton = () => {\n// const [isfulfilled, setIsFulfilled] = React.useState(false);\n// const republish = () => {\n// setIsFulfilled(value => !value);\n// return (\n// <input\n// type=\"checkbox\"\n// checked={isfulfilled}\n// onChange={republish}\n// />\n// );\n// }\n// export default FulfilledButton;\n\nclass FulfilledButton extends Component {\n  constructor() {\n    super();\n\n    this.toggleFulfilled = () => {\n      const {\n        fulfilled\n      } = this.state;\n      this.setState({\n        fulfilled: !fulfilled\n      });\n    };\n\n    this.handleSubmit = event => {\n      this.toggleFulfilled();\n      const {\n        fulfilled\n      } = this.state;\n      const {\n        request,\n        volunteer\n      } = this.props; // let status = {\n      // volunteer_id: volunteer.id,\n      // request_id: request.id,\n      // fulfilled: fulfilled\n      // }\n\n      const updateData = {\n        fulfilled: true\n      };\n      console.log(request);\n      axios.patch(`http://localhost:3003/requests/${request.id}`, {\n        updateData\n      }, {\n        withCredentials: true\n      }).then(response => {\n        console.log(response);\n\n        if (response.data.status === 200) {\n          console.log(response.data); // this.props.status(response.data)\n\n          this.redirect('/');\n        }\n      }).catch(error => {\n        console.log(\"request error\", error);\n      });\n    };\n\n    this.state = {\n      fulfilled: false\n    };\n    this.toggleFulfilled = this.toggleFulfilled.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleSubmit,\n      children: \"Fulfill Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nexport default FulfilledButton;","map":{"version":3,"sources":["/Users/colthafer/client_side-main/src/Fulfilled.js"],"names":["axios","React","Component","FulfilledButton","constructor","toggleFulfilled","fulfilled","state","setState","handleSubmit","event","request","volunteer","props","updateData","console","log","patch","id","withCredentials","then","response","data","status","redirect","catch","error","bind","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,eAAN,SAA8BD,SAA9B,CAAwC;AACxCE,EAAAA,WAAW,GAAE;AACb;;AADa,SASbC,eATa,GASK,MAAM;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAKC,KAA3B;AACA,WAAKC,QAAL,CAAc;AAACF,QAAAA,SAAS,EAAE,CAACA;AAAb,OAAd;AACC,KAZY;;AAAA,SAcbG,YAda,GAcGC,KAAD,IAAW;AAC1B,WAAKL,eAAL;AACA,YAAM;AAACC,QAAAA;AAAD,UAAc,KAAKC,KAAzB;AACA,YAAM;AAAEI,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAyB,KAAKC,KAApC,CAH0B,CAI1B;AACA;AACA;AACA;AACA;;AACA,YAAMC,UAAU,GAAG;AAACR,QAAAA,SAAS,EAAE;AAAZ,OAAnB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAX,MAAAA,KAAK,CAACiB,KAAN,CAAa,kCAAiCN,OAAO,CAACO,EAAG,EAAzD,EAA4D;AAACJ,QAAAA;AAAD,OAA5D,EAA0E;AAACK,QAAAA,eAAe,EAAE;AAAlB,OAA1E,EACCC,IADD,CACMC,QAAQ,IAAI;AAClBN,QAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;;AACA,YAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,GAA7B,EAAkC;AAClCR,UAAAA,OAAO,CAACC,GAAR,CAAYK,QAAQ,CAACC,IAArB,EADkC,CAElC;;AACA,eAAKE,QAAL,CAAc,GAAd;AACC;AACA,OARD,EASCC,KATD,CASOC,KAAK,IAAI;AAChBX,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BU,KAA7B;AACC,OAXD;AAYC,KArCY;;AAEb,SAAKnB,KAAL,GAAa;AACbD,MAAAA,SAAS,EAAE;AADE,KAAb;AAIA,SAAKD,eAAL,GAAqB,KAAKA,eAAL,CAAqBsB,IAArB,CAA0B,IAA1B,CAArB;AACC;;AA+BDC,EAAAA,MAAM,GAAG;AACT,wBAAO;AAAQ,MAAA,OAAO,EAAE,KAAKnB,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACC;;AAzCuC;;AA4CxC,eAAeN,eAAf","sourcesContent":["import axios from \"axios\";\nimport React, { Component }from \"react\";\n\n// const FulfilledButton = () => {\n// const [isfulfilled, setIsFulfilled] = React.useState(false);\n// const republish = () => {\n// setIsFulfilled(value => !value);\n\n// return (\n// <input\n// type=\"checkbox\"\n// checked={isfulfilled}\n// onChange={republish}\n// />\n// );\n// }\n\n// export default FulfilledButton;\n\nclass FulfilledButton extends Component {\nconstructor(){\nsuper()\nthis.state = {\nfulfilled: false,\n};\n\nthis.toggleFulfilled=this.toggleFulfilled.bind(this)\n}\n\ntoggleFulfilled = () => {\nconst { fulfilled } = this.state;\nthis.setState({fulfilled: !fulfilled});\n}\n\nhandleSubmit = (event) => {\nthis.toggleFulfilled();\nconst {fulfilled} = this.state\nconst { request, volunteer } = this.props;\n// let status = {\n// volunteer_id: volunteer.id,\n// request_id: request.id,\n// fulfilled: fulfilled\n// }\nconst updateData = {fulfilled: true}\nconsole.log(request);\naxios.patch(`http://localhost:3003/requests/${request.id}`, {updateData}, {withCredentials: true})\n.then(response => {\nconsole.log(response);\nif (response.data.status === 200) {\nconsole.log(response.data);\n// this.props.status(response.data)\nthis.redirect('/')\n}\n})\n.catch(error => {\nconsole.log(\"request error\", error);\n});\n}\nrender() {\nreturn <button onClick={this.handleSubmit}>Fulfill Request</button>\n}\n}\n\nexport default FulfilledButton;\n"]},"metadata":{},"sourceType":"module"}