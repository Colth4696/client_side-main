{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colthafer/client_side-main/src/RequestForm.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Geocode from \"react-geocode\";\n\nclass RequestForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      // set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\n      Geocode.setApiKey(\"AIzaSyB465RpcGT8xIHfVYXmsDZP657fvRgqQr0\"); // set response language. Defaults to english.\n\n      Geocode.setLanguage(\"en\"); // set response region. Its optional.\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\n\n      Geocode.setRegion(\"es\");\n    };\n\n    this.handleAddress = event => {\n      const {\n        name,\n        value\n      } = event.target;\n\n      if (value.length > 4) {\n        Geocode.fromAddress(value).then(response => {\n          const {\n            lat,\n            lng\n          } = response.results[0].geometry.location;\n          console.log(lat, lng);\n        }, error => {\n          console.error(error);\n        });\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleChange = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        title,\n        description,\n        latitude,\n        longitude,\n        category\n      } = this.state;\n      let request = {\n        title: title,\n        description: description,\n        latitude: latitude,\n        longitude: longitude,\n        category: category\n      };\n      axios.post(\"http://localhost:3003/requests\", {\n        request\n      }, {\n        withCredentials: true\n      }).then(response => {\n        if (response.data.status === 'created') {\n          this.props.requests(response.data);\n          this.redirect();\n        }\n      }).catch(error => {\n        console.log(\"request error\", error);\n      });\n      event.preventDefault();\n    };\n\n    this.redirect = () => {\n      this.props.history.push('/');\n    };\n\n    this.state = {\n      title: \"\",\n      description: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      category: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Task\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"title\",\n          placeholder: \"Title\",\n          value: this.state.title,\n          onChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: this.state.description,\n          onChange: this.handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          placeholder: \"Address\",\n          value: this.state.address,\n          onChange: this.handleAddress,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"category\",\n            placeholder: \"Material\",\n            value: this.state.category,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RequestForm;","map":{"version":3,"sources":["/Users/colthafer/client_side-main/src/RequestForm.js"],"names":["React","Component","axios","Geocode","RequestForm","constructor","props","componentDidMount","setApiKey","setLanguage","setRegion","handleAddress","event","name","value","target","length","fromAddress","then","response","lat","lng","results","geometry","location","console","log","error","setState","handleChange","handleSubmit","preventDefault","title","description","latitude","longitude","category","state","request","post","withCredentials","data","status","requests","redirect","catch","history","push","render","address"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Geocode from \"react-geocode\";\r\n\r\n\r\nclass RequestForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: \"\",\r\n            description: \"\",\r\n            latitude: \"\",\r\n            longitude: \"\",\r\n            category: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n         // set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\r\n         Geocode.setApiKey(\"AIzaSyB465RpcGT8xIHfVYXmsDZP657fvRgqQr0\");\r\n\r\n         // set response language. Defaults to english.\r\n         Geocode.setLanguage(\"en\");\r\n\r\n         // set response region. Its optional.\r\n         // A Geocoding request with region=es (Spain) will return the Spanish city.\r\n        Geocode.setRegion(\"es\");\r\n    }\r\n\r\n    handleAddress = (event) => {\r\n        const {name, value} = event.target\r\n        if (value.length > 4) {\r\n        Geocode.fromAddress(value)\r\n        .then(\r\n            (response) => {\r\n              const { lat, lng } = response.results[0].geometry.location;\r\n              console.log(lat, lng);\r\n            },\r\n            (error) => {\r\n              console.error(error);\r\n            }\r\n          );\r\n        }\r\n        this.setState({\r\n          [name]: value\r\n        })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const {name, value} = event.target\r\n        this.setState({\r\n          [name]: value\r\n        })\r\n      };\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const {title, description, latitude, longitude, category} = this.state\r\n        let request = {\r\n          title: title,\r\n          description: description,\r\n          latitude: latitude,\r\n          longitude: longitude,\r\n          category: category\r\n        }\r\n\r\n            axios.post(\"http://localhost:3003/requests\", {request},\r\n            { withCredentials: true }\r\n            )\r\n            .then(response => {\r\n                if (response.data.status === 'created') {\r\n                this.props.requests(response.data)\r\n                this.redirect()            \r\n            }\r\n        })        \r\n            .catch(error => {\r\n                console.log(\"request error\", error);\r\n            });\r\n            event.preventDefault();\r\n        };\r\n        redirect = () => {\r\n            this.props.history.push('/')\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Task\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Title\"\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                    <br/>\r\n\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    placeholder=\"Description\"\r\n                    value={this.state.description}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    />\r\n\r\n                    <br/>\r\n\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"address\"\r\n                    placeholder=\"Address\"\r\n                    value={this.state.address}\r\n                    onChange={this.handleAddress}\r\n                    required\r\n                    />\r\n\r\n                    {/* <br/>\r\n\r\n                    <input\r\n                    type=\"decimal\"\r\n                    name=\"longitude\"\r\n                    placeholder=\"Longitude\"\r\n                    value={this.state.longitude}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                    /> */}\r\n\r\n                    <br/>\r\n\r\n                    <div>\r\n\r\n                        <input\r\n                        type =\"text\"\r\n                        name =\"category\"\r\n                        placeholder=\"Material\"\r\n                        value = {this.state.category}\r\n                        onChange = {this.handleChange} />\r\n                 \r\n                    </div>\r\n\r\n                    <br/>\r\n\r\n                    <button type=\"submit\">Submit</button>\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RequestForm"]},"metadata":{},"sourceType":"module"}